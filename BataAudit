# BATA Smart Contract Security Audit Report

## Table of Contents

1. [Disclaimer](#disclaimer)
2. [Executive Summary](#executive-summary)
3. [Critical Issues](#critical-issues)
   - [1. Staking Lock Duration Reset Attack](#1-critical-staking-lock-duration-reset-attack)
4. [Medium Severity Issues](#medium-severity-issues)
   - [2. Missing Slippage Protection for BATA Price Changes](#2-medium-missing-slippage-protection-for-bata-price-changes)
   - [3. Unbounded Loop DoS](#3-medium-unbounded-loop-dos)
5. [Admin-Related Issues](#admin-related-issues)
   - [4. RescueToken Can Drain User Funds](#4-admin-rescuetoken-can-drain-user-funds)
   - [5. Merkle Root Updates After Claims](#5-admin-merkle-root-updates-after-claims)
   - [6. TGE Timestamp Changes](#6-admin-tge-timestamp-changes)

---

### Disclaimer
This audit represents a point-in-time assessment. Smart contracts require ongoing security monitoring and regular audits. No audit can identify 100% of vulnerabilities, so multiple audits are recommended.

---

## Executive Summary

### Total Issues Found: 7
- 1 CRITICAL severity issue 
- 2 MEDIUM severity issues 
- 4 ADMIN-RELATED issues 

---

## Critical Issues

### 1. [CRITICAL] Staking Lock Duration Reset Attack

**Contract**: `BATAStaking.sol`  
**Severity**: CRITICAL  

#### Description
The `stake()` function unconditionally resets the lock timestamp for ALL previously staked tokens whenever new tokens are added. This completely breaks the 60-day holding requirement for profit-sharing eligibility.

#### Vulnerable Code
```solidity
function stake(uint256 amount) external nonReentrant {
    require(amount > 0, "amount zero");
    StakeInfo storage info = stakes[msg.sender];
    info.amount += amount;
    info.timestamp = block.timestamp; // <-- RESETS ENTIRE LOCK PERIOD
    bata.safeTransferFrom(msg.sender, address(this), amount);
    emit Staked(msg.sender, amount);
}
